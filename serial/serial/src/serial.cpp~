#include     <stdio.h>      /*标准输入输出定义*/
#include     <stdlib.h>     /*标准函数库定义*/
#include     <unistd.h>     /*Unix 标准函数定义*/
#include     <sys/types.h>  
#include     <sys/stat.h>   
#include     <fcntl.h>      /*文件控制定义*/
#include     <termios.h>    /*PPSIX 终端控制定义*/
#include     <errno.h>      /*错误号定义*/

#include "ros/ros.h"
#include "std_msgs/Int16.h"
#include "std_msgs/String.h"


#define FALSE -1
#define TRUE 0
#define int16 short
#define uint16 unsigned short
int16 x;
int16 y;
uint16 yaw;
int16 dis[6]={0};
uint16 error;
uint16 keep;

int main()
{
	char buf[1024];
	short sum[11] ;
	int t = 0;
	int x = 0;
	int k = 0;
	int fd,flag_close,retv;
	struct  termios opt;
	
	ros::init(argc, argv, "uwb");
	ros::NodeHandle n;
	ros::Publisher uwb_pub = n.advertise<std_msgs::Int16>("uwb", 1000);
	ros::Rate loop_rate(50);

	fd = open("/dev/ttyACM0",O_RDWR);
	if(fd==-1)
	{
		printf("open failed\n");
		exit (0);
	}
	else
		printf("open success\n");
	tcgetattr(fd,&opt);
	cfsetispeed(&opt,B115200); 
	cfsetospeed(&opt,B115200);
	
	opt.c_cflag |= (CLOCAL | CREAD);                    
	// 无校验 8位数据位1位停止位
	opt.c_cflag &= ~PARENB;                         
	opt.c_cflag &= ~CSTOPB;
	opt.c_cflag &= ~CSIZE; 
	// 8个数据位
	opt.c_cflag |= CS8; 
	// 原始数据输入
	opt.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG); 
	opt.c_oflag &= ~(OPOST);
	// 设置等待时间和最小接收字符数
	opt.c_cc[VTIME]    = 0;                          
	opt.c_cc[VMIN]     = 0;   
	// 处理未接收的字符
	tcflush(fd, TCIFLUSH);  
	tcsetattr(fd,TCSANOW,&opt);                         
	printf("start send\n");
	//printf("receive data is:");
	while(ros::ok())
	{		
		std_msgs::Int16 uwb;

		retv=read(fd,buf,1024);   
		if(retv==-1)	
			printf("read failed\n");
		if(retv>0)
		{
			//printf("%d",retv);
			for(k=0;k<retv;k++)
			{		
				switch(k)
				{
					case 0: printf("x is");
						printf(" %05d ",x=buf[k]+(buf[k+1]<<8));
						uwb.x=x;					
						break;
					case 2:	printf("y is");
						printf(" %05d ",y=buf[k]+(buf[k+1]<<8));
						uwb.y=y;
						break;
					case 4: printf("yaw is");
						printf(" %05d ",yaw=buf[k]+(buf[k+1]<<8));
						uwb.yaw=yaw;
						break;
					case 6: printf("d0 is");
						printf(" %05d ",dis[0]=buf[k]+(buf[k+1]<<8));
						uwb.d0=dis[0];
						break;
					case 8: printf("d1 is");
						printf(" %05d ",dis[1]=buf[k]+(buf[k+1]<<8));
						uwb.d1=dis[1];
						break;
					case 10: printf("d2 is");
						 printf(" %05d ",dis[2]=buf[k]+(buf[k+1]<<8));
						 uwb.d2=dis[2];
						 break;
					case 12: printf("d3 is");
						 printf(" %05d ",dis[3]=buf[k]+(buf[k+1]<<8));
						 uwb.d3=dis[3];
						 break;
					case 14: printf("d4 is");
						 printf(" %05d ",dis[4]=buf[k]+(buf[k+1]<<8));
						 uwb.d4=dis[4];
						 break;
					case 16: printf("d5 is");
						 printf(" %05d ",dis[5]=buf[k]+(buf[k+1]<<8));
						 uwb.d5=dis[5];
						 break;
					case 18: printf("error is");
						 printf(" %05d ",error=buf[k]+(buf[k+1]<<8));
						 uwb.error=error;
						 break;
					case 20: printf("keep is");
						 printf(" %05d\n ",keep=buf[k]+(buf[k+1]<<8));
						 uwb.keep=keep;
						 break;
				}
			}
			uwb_pub.publish(msg);
			ros::spinOnce();
			loop_rate.sleep();
		}

	}
	usleep(10);		 
	flag_close = close(fd);
	if(flag_close == -1)   
		printf("Close the Device failed\n");
	return 0;
}
